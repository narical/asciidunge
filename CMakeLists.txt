# Сборочный файл для программы my_program

# Минимальная версия CMake, младше нельзя.
cmake_minimum_required( VERSION 3.6 )
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_definitions( "-ggdb" )
add_definitions( "-std=c++11" )

# Устанавливаем значение переменной BIN
set( BIN asciidunge )
# Имя проекта у нас соответствует имени программы.
project( ${BIN} )

# Устанавливаем корневой путь к папке с исходниками программы.
set( SOURCE_ROOT src )

# Очень полезная функция. По умолчанию имена файлов с исходниками
# нужно перечислять явно. Мне это кажется совершенно неудобным (особенно
# если файлов много). Поэтому я использую эту функцию.
# Она (рекурсивно) просматривает исходники (начиная от корневого пути,
# указанного выше) и собирает имена всех файлов, имеющих классическое
# разрешение, такие как .cpp, .cxx и т.п.
# В итоге формируется список всех найденных файлов и сохраняется в переменной
# SOURCES
aux_source_directory( ${SOURCE_ROOT} SOURCES )

# Указываем пути, где искать заголовочники, дополнительно к стандартным путям.
include_directories( include /usr/include/libtcod/ )

# Устанавливаем путь, куда будет скопирован исполняемый файл при выполнении
# команды 'make install'.
set( INSTALL_PATH /usr/local/bin/ )

# Указываем пути, где искать сторонние динамически библиотеки. Эти пути будут
# просмотрены в дополнение к умолчальными системным путям.
# link_directories( "/usr/lib/" )

# Перечисляем необходимые сторонние динамические библиотеки и сохраняем
# их список в переменной REQUIRED_LIBRARIES.
# Поиск этих библиотек будет произведён как по стандартным системным путям, 
# так и по указанным выше (с помощью функции link_directories).
set( REQUIRED_LIBRARIES ncurses tcod tcodxx )

# Устанавливаем флаги компилятора (причём никаких скрытых флагов, только эти).
set( CMAKE_CXX_FLAGS "-O0 -Wall -pedantic" ) 

# Собираем исполняемый файл с именем my_program.
add_executable( ${BIN} ${SOURCES} )
# Компонуем собранную программу с необходимыми динамическими библиотеками.
target_link_libraries( ${BIN} ${REQUIRED_LIBRARIES} )

# Установка. Это действие будет активировано при выполнении команды 'make install'.
install( TARGETS ${BIN} DESTINATION ${INSTALL_PATH} )
